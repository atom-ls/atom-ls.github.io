[{"content":"\n最近接手一个小项目，因为涉及到用身份证信息去请求第三方的数据库，因此需要用Express搭建一个本地的Server，然后身份证信息直接上传到本地，进行hmac256加密后再请求第三方数据，当然公司要求只是先写一个简单的demo，功能相对简单。之前也没用过Express的框架，不过用了之后发现还是比较好用的.\n\n本次开发系统环境\n```\nWin7 64bit\nNodejs:6.10.2\nNpm:3.10.10\n```\n### 安装及搭建Express框架    \n        -- 搭建的前提是已经安装了Nodejs（自带npm包管理工具）。\n\n1.首先，我们需要安装express库。在Express3.6.x之前的版本，Express需要全局安装，项目构建器模块是合并在Express项目中的，\n后来这个构建器被拆分出来，独立成为了一个项目express-generator，现在我们只需要全局安装express-generator项目就好。\n\nnpm install -g express-generator \n\n![](./images/install_1.png)\n\n2.安装好express-generator包，让我们在命令行使用一下Express命令，这里是4.15.2版本\n\nexpress -V #大写的V\n\n![](./images/install_2.png)\n\n3.接下来让我们用命令来搭建项目，进入需要创建项目的文件夹下，我们现在就直接在demo9文件下创建项目,放置项目的文件夹名称叫做expressDemo\n\nexpress -e expressDemo #expressDemo为自定义的文件夹名称\n\n![](./images/install_3.png)\n\n4.运行 cd expressDemo \u0026\u0026 npm install (切换到expressDemo文件下并安装所需要的依赖包)\n\n![](./images/into-expressDemo.png)\n\n注意，运行完该命令，已经切换到expressDemo目录下面咯\n\n![](./images/into-expressDemo2.png)\n\n5.启动项目 npm start\n\n![](./images/npm-start.png)\n\n一个最基础的欢迎界面就出来了 ^_^\n\n![](./images/express-show.png)\n\n这就是最基本的搭建项目了，其实相对而言不是那么复杂，Express框架帮我们处理了大部分依赖包的选择，切换目录以及一些配置文件的设置，也都配置好了，老版本的express可能还存在express-generator和express不匹配的问题，找到问题在app.js文件中，注释\n//var users = require('./routes/users');\n//app.use('/users', users);\n当然，本人没遇到这样的问题...\n\n\n###目录结构\n\n接下来咱们来点深入的，了解一下项目的结构\n\n![](./images/express-show2.png)\n\n- bin, 存放启动项目的脚本文件\n- node_modules, 存放所有的项目依赖库(这里比较多，就没展开了哈)\n- public，静态文件(css,js,img)\n- routes，路由文件(MVC中的C,controller)\n- views，页面文件(Ejs模板)\n- package.json，项目依赖配置及开发者信息\n- app.js，应用核心配置文件\n\n### package.json 和 bin/www \n\n![](./images/package-json.png)\n\n这里主要看 scripts 的设置，这里其实相当于express框架帮我们自定义了启动命令叫做npm start ，它实际上的指令是 node ./bin/www\n\n那么bin文件下面的www又有什么内容呢？\n\n我们来看一下\n\n![](./images/www.png)\n\nwww文件也是一个node的脚本，用于分离配置和启动程序。需要注意的，已经在图上用红框框出，是express帮我们封装的监听网络服务端口以及一些异常处理，主要还是基于nodejs中http模块。对于我们而言，一般改动不大，要注意的一点是port那里，如果放在服务器上，配置是则是环境的端口，不过这个本人未实践，还不太清楚，如果各位感兴趣，可自行去了解一下；本地端口默认是3000，可能存在被占用的情况，可以在此处进行更改\n\n### app.js 核心文件\n关于核心文件，express最主要的配置都在这里，我这里直接把自己项目里的配置放在这里吧，并且已经有中文注释，其中users已经删除，因为本人项目中并没有用到，还有就是app.use('/',index),因为主要内容都是在index中设置。\n\n```\n//加载依赖模块\n\nvar express = require('express');\n\nvar path = require('path');\n\nvar favicon = require('serve-favicon');\n\nvar logger = require('morgan');\n\nvar cookieParser = require('cookie-parser');\n\nvar bodyParser = require('body-parser');\n\n// 加载路由控制，这里是主要的，因为本人本次的项目主要都是在index.js中设置的\n\nvar index = require('./routes/index');\n\n// 创建项目实例\n\nvar app = express();\n\n// 定义EJS模板引擎和模板文件位置，也可以使用jade或其他模型引擎\n\napp.set('views', path.join(__dirname, 'views'));\n\n//这里设置引擎可以更改，也可以更改为html\n\napp.set('view engine', 'ejs');\n\n// 定义icon图标,这里需要将ico文件放在public下面，不然每次还是会报not found错误，不过不用管它\n\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\n\n// 定义日志和输出级别\n\napp.use(logger('dev'));\n\n// 定义数据解析器\n\napp.use(bodyParser.json());\n\napp.use(bodyParser.urlencoded({ extended: false }));\n\n// 定义cookie解析器\n\napp.use(cookieParser());\n\n// 定义静态文件目录\n\napp.use(express.static(path.join(__dirname, 'public')));\n\n//定义引用第三方包目录\n\napp.use(express.static(path.join(__dirname,'node_modules')));\n\n// 匹配路径和路由，这里是应用\n\napp.use('/', index);\n\n// 404错误处理\n\napp.use(function(req, res, next) {\n\n  var err = new Error('Not Found');\n\n  err.status = 404;\n\n  next(err);\n\n});\n\n// 报错处理\n\napp.use(function(err, req, res, next) {\n\n  // set locals, only providing error in development\n\n  res.locals.message = err.message;\n\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n\n  res.status(err.status || 500);\n\n  res.render('error');\n\n});\n\nmodule.exports = app;\n\n```\n\n\n### 简单说一下 public 下面的文件\n    public下面是一些静态文件以及在最前端的一些交互体验，由于在app.js中已经定义静态文件目录是从public文件夹开始，定义引用第三方包目录是从node_modules开始，因此我们在引用静态文件的时候，可以省略public以上的路径，同样引用第三方包的时候，也可以直接省略node_modules以上的路径。还是看图更直观(node_modules太长没截图，是同样的道理)\n\n![](./images/public.png)\n\n当然public里面对于静态文件的处理比较有优势的一点就是类似模版的功能，可以相互拼接，提取功能的部分，分别保存，然后再单独设置不同的核心部分，这样对于核心部分的代码维护，简洁，易维护。\n我们把index.ejs页面切分成3个部分：header.ejs, index.ejs, footer.ejs，用于网站页面的模块化\n\n![](./images/header.png)\n\n![](./images/footer.png)\n\n![](./images/index.png)\n\n这样的话，核心部分的代码就只有index一部分了，当然这个模块的划分也完全可以根据你自己的需求来，如果每个模块你需要引用不同的js或者css，你完全可以划分到link之前，或者script之前.\n\n那么问题来了，如果我点击之后要跳转到其它页面怎么办呢？这个就设计到路由的问题了，我们进到下一部分\n\n\n### 路由功能  (get and post)\n关于路由，其实app.js中已经设置了，再回过头来看一下\n\n```\n// 加载路由控制，这里是主要的，因为本人本次的项目主要都是在index.js中设置的\n\nvar index = require('./routes/index');\n\n// 匹配路径和路由，这里是应用\n\napp.use('/', index);\n```\n\n那么就需要在index.js里面进行设置了，在这里之前，我们先要做一些事情\n- 在index.ejs做一下链接的设置，只是样式的设置，至于怎么跳转，我们后续再说\n\n![](./images/index2.png)\n\n- 增加一个details的页面,简单设置一个就好\n\n![](./images/details.png)\n\n好啦，接下来我们设置index.js，一切尽在图上(快结束了吧，好长~)\n\n```\n//引入依赖的模块\nvar express = require('express');\nvar router = express.Router();\n\n/* 设置跳转到index模块 */\nrouter.get('/', function (req, res, next) {\n  //注意这里，render是指渲染哪个views，这里渲染的是index.ejs(后缀不用写),\n  //后面紧接的对象是需要传过去的内容，这里是可以动态设置的\n  res.render('index', {\n    title: 'Express'\n  });\n});\n\n//接下来让我们自己设置跳转到details\nrouter.get('/details', (req, res, next) =\u003e {\n  res.render('details', {\n    title: '详情页面',\n    details: '这是details页面，点击下面会有更精彩的哦'\n  })\n})\n\n//导出router\nmodule.exports = router;\n```\n\n然后我们重启一下命令行，ctrl+c 2次，停止，然后npm start 重启，在浏览器地址栏输入localhost:3000，如图\n\n![](./images/index3.png)\n\n我们点击这里跳转\n\n![](./images/details2.png)\n\n注意红框内的变化\n\n那么又有个问题，有没有必要每次都重新写一个页面呢？\n\n完全没必要，我们可以重复渲染，再动态填充加载内容，这也是每次加载传参的好处，我们再来修改，增加一个新的路由，但是还是借用index.ejs的模版内容\n\n```\n//这个是新路由，但是渲染的还是index.ejs的模版，只不过传参有所改变\n\nrouter.get('/more',(req,res,next)=\u003e{\n  res.render('index',{\n    title:'这是更多页面，不是首页'\n  })\n})\n```\n\n命令行重启一下，然后我们再来看一下，点击details下面链接跳转的more页面\n![](./images/more.png)\n\n当然以上介绍的主要都是get方法，下面介绍一下post方法\n\n#### post方法\n\n其实post方法和get方法差不多，post方法也是router.post(路由地址,(req,res,next)=\u003e{}),只不过在传参问题上，前端通过form表单或者ajax传递参数过来，express通过req.body获取对应的参数，如果是提交一些参数的话，我们可以在index.ejs里增加一个表单\n```\n\u003cform action='/details' method='post'\u003e \n    \u003cinput type='text' name='name' value='fred'\u003e \n    \u003cinput type='text' name='tel' value='0926xxx572'\u003e \n    \u003cinput type='submit' value='Submit'\u003e \n\u003c/form\u003e\n```\n\n同时在index.js页面设置路由方法\n\n```\n//设置post方法的路由\nrouter.post('/details',(req,res,next)=\u003e{\n  res.render('details', {\n    title: '详情页面',\n    details: '这是details页面，点击下面会有更精彩的哦'\n  })\n  //后台打印参数\n  console.log('req.body---\u003e',req.body);\n})\n```\n\n显示index页面如图\n\n![](./images/form.png)\n\n点击submit提交，会跳转到details页面\n\n![](./images/details3.png)\n\n后台打印结果如图\n\n![](./images/req.png)\n\n### 不过要注意，前端如果上传的是文件file，那么express接收的是req.files,另外还涉及到form表单刷新提交（即上面的form表单提交）和无刷新提交（ajax方法），关于这个问题，后续有空再写一篇博客吧；\n\n然后就可以在后台进行其它后续的操作了，比如：\n\n- 转发，加密后，请求远端的服务器，需加载request模块，调用request.post方法\n\n- 返回前端数据,res.send()\n\n- ...\n\n\n### 好啦，今天就先码到这里吧，本人也是初次使用express框架，感觉还是比较好用的，这次博客还没写完，下一篇具体，讲解一下post方面中表单提交及文件处理的部分，这也是本人这次项目中的一些难点，也涉及到一些开发环境的问题。\n\n### 码字不易，如果各位需要转载，请注明出处，谢谢！也欢迎各位如果有问题，大家可以交流交流，wechat：13666882100;\n\n\n\n参考资料:  \n\n张丹的粉丝日志：[http://blog.fens.me/nodejs-express4/](http://blog.fens.me/nodejs-express4/)\n\n官网：[http://www.expressjs.com.cn/](http://www.expressjs.com.cn/)","cover":"/images/example.png","link":"express_part1.html","preview":"\u003cp\u003e超详细的Nodejs开发框架Express案例说明~\u003c/p\u003e\n","title":"Nodejs开发框架Express搭建及使用详细记录说明（一）"}]